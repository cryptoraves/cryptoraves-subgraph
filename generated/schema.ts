// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class _Deposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save _Deposit entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save _Deposit entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("_Deposit", id.toString(), this);
  }

  static load(id: string): _Deposit | null {
    return store.get("_Deposit", id) as _Deposit | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get cryptoravesTokenId(): BigInt {
    let value = this.get("cryptoravesTokenId");
    return value.toBigInt();
  }

  set cryptoravesTokenId(value: BigInt) {
    this.set("cryptoravesTokenId", Value.fromBigInt(value));
  }

  get ercType(): BigInt {
    let value = this.get("ercType");
    return value.toBigInt();
  }

  set ercType(value: BigInt) {
    this.set("ercType", Value.fromBigInt(value));
  }
}

export class _Withdraw extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save _Withdraw entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save _Withdraw entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("_Withdraw", id.toString(), this);
  }

  static load(id: string): _Withdraw | null {
    return store.get("_Withdraw", id) as _Withdraw | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get cryptoravesTokenId(): BigInt {
    let value = this.get("cryptoravesTokenId");
    return value.toBigInt();
  }

  set cryptoravesTokenId(value: BigInt) {
    this.set("cryptoravesTokenId", Value.fromBigInt(value));
  }

  get ercType(): BigInt {
    let value = this.get("ercType");
    return value.toBigInt();
  }

  set ercType(value: BigInt) {
    this.set("ercType", Value.fromBigInt(value));
  }
}

export class _Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save _Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save _Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("_Token", id.toString(), this);
  }

  static load(id: string): _Token | null {
    return store.get("_Token", id) as _Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cryptoravesTokenId(): BigInt {
    let value = this.get("cryptoravesTokenId");
    return value.toBigInt();
  }

  set cryptoravesTokenId(value: BigInt) {
    this.set("cryptoravesTokenId", Value.fromBigInt(value));
  }

  get isManagedToken(): boolean {
    let value = this.get("isManagedToken");
    return value.toBoolean();
  }

  set isManagedToken(value: boolean) {
    this.set("isManagedToken", Value.fromBoolean(value));
  }

  get ercType(): BigInt {
    let value = this.get("ercType");
    return value.toBigInt();
  }

  set ercType(value: BigInt) {
    this.set("ercType", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get emoji(): string {
    let value = this.get("emoji");
    return value.toString();
  }

  set emoji(value: string) {
    this.set("emoji", Value.fromString(value));
  }
}

export class _CryptoDropped extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save _CryptoDropped entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save _CryptoDropped entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("_CryptoDropped", id.toString(), this);
  }

  static load(id: string): _CryptoDropped | null {
    return store.get("_CryptoDropped", id) as _CryptoDropped | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get cryptoravesTokenId(): BigInt {
    let value = this.get("cryptoravesTokenId");
    return value.toBigInt();
  }

  set cryptoravesTokenId(value: BigInt) {
    this.set("cryptoravesTokenId", Value.fromBigInt(value));
  }
}

export class _Transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save _Transfer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save _Transfer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("_Transfer", id.toString(), this);
  }

  static load(id: string): _Transfer | null {
    return store.get("_Transfer", id) as _Transfer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get tweetId(): BigInt {
    let value = this.get("tweetId");
    return value.toBigInt();
  }

  set tweetId(value: BigInt) {
    this.set("tweetId", Value.fromBigInt(value));
  }

  get fromTo(): string {
    let value = this.get("fromTo");
    return value.toString();
  }

  set fromTo(value: string) {
    this.set("fromTo", Value.fromString(value));
  }
}

export class _HeresMyAddress extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save _HeresMyAddress entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save _HeresMyAddress entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("_HeresMyAddress", id.toString(), this);
  }

  static load(id: string): _HeresMyAddress | null {
    return store.get("_HeresMyAddress", id) as _HeresMyAddress | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ethAddress(): Bytes {
    let value = this.get("ethAddress");
    return value.toBytes();
  }

  set ethAddress(value: Bytes) {
    this.set("ethAddress", Value.fromBytes(value));
  }

  get cryptoravesAddress(): Bytes {
    let value = this.get("cryptoravesAddress");
    return value.toBytes();
  }

  set cryptoravesAddress(value: Bytes) {
    this.set("cryptoravesAddress", Value.fromBytes(value));
  }

  get tweetId(): BigInt {
    let value = this.get("tweetId");
    return value.toBigInt();
  }

  set tweetId(value: BigInt) {
    this.set("tweetId", Value.fromBigInt(value));
  }
}

export class _NewUser extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save _NewUser entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save _NewUser entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("_NewUser", id.toString(), this);
  }

  static load(id: string): _NewUser | null {
    return store.get("_NewUser", id) as _NewUser | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get userId(): BigInt {
    let value = this.get("userId");
    return value.toBigInt();
  }

  set userId(value: BigInt) {
    this.set("userId", Value.fromBigInt(value));
  }

  get userName(): string {
    let value = this.get("userName");
    return value.toString();
  }

  set userName(value: string) {
    this.set("userName", Value.fromString(value));
  }

  get cryptoravesAddress(): Bytes {
    let value = this.get("cryptoravesAddress");
    return value.toBytes();
  }

  set cryptoravesAddress(value: Bytes) {
    this.set("cryptoravesAddress", Value.fromBytes(value));
  }

  get imageUrl(): string {
    let value = this.get("imageUrl");
    return value.toString();
  }

  set imageUrl(value: string) {
    this.set("imageUrl", Value.fromString(value));
  }
}

export class _UsernameChange extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save _UsernameChange entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save _UsernameChange entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("_UsernameChange", id.toString(), this);
  }

  static load(id: string): _UsernameChange | null {
    return store.get("_UsernameChange", id) as _UsernameChange | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get userId(): BigInt {
    let value = this.get("userId");
    return value.toBigInt();
  }

  set userId(value: BigInt) {
    this.set("userId", Value.fromBigInt(value));
  }

  get userName(): string {
    let value = this.get("userName");
    return value.toString();
  }

  set userName(value: string) {
    this.set("userName", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }
}

export class _ImageChange extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save _ImageChange entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save _ImageChange entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("_ImageChange", id.toString(), this);
  }

  static load(id: string): _ImageChange | null {
    return store.get("_ImageChange", id) as _ImageChange | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get userId(): BigInt {
    let value = this.get("userId");
    return value.toBigInt();
  }

  set userId(value: BigInt) {
    this.set("userId", Value.fromBigInt(value));
  }

  get imageUrl(): string {
    let value = this.get("imageUrl");
    return value.toString();
  }

  set imageUrl(value: string) {
    this.set("imageUrl", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }
}

export class _TransferSingle extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save _TransferSingle entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save _TransferSingle entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("_TransferSingle", id.toString(), this);
  }

  static load(id: string): _TransferSingle | null {
    return store.get("_TransferSingle", id) as _TransferSingle | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get operator(): Bytes {
    let value = this.get("operator");
    return value.toBytes();
  }

  set operator(value: Bytes) {
    this.set("operator", Value.fromBytes(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get cryptoravesTokenId(): BigInt {
    let value = this.get("cryptoravesTokenId");
    return value.toBigInt();
  }

  set cryptoravesTokenId(value: BigInt) {
    this.set("cryptoravesTokenId", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class _TransferBatch extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save _TransferBatch entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save _TransferBatch entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("_TransferBatch", id.toString(), this);
  }

  static load(id: string): _TransferBatch | null {
    return store.get("_TransferBatch", id) as _TransferBatch | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get operator(): Bytes {
    let value = this.get("operator");
    return value.toBytes();
  }

  set operator(value: Bytes) {
    this.set("operator", Value.fromBytes(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get cryptoravesTokenIds(): Array<BigInt> | null {
    let value = this.get("cryptoravesTokenIds");
    if (value === null) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set cryptoravesTokenIds(value: Array<BigInt> | null) {
    if (value === null) {
      this.unset("cryptoravesTokenIds");
    } else {
      this.set(
        "cryptoravesTokenIds",
        Value.fromBigIntArray(value as Array<BigInt>)
      );
    }
  }

  get values(): Array<BigInt> | null {
    let value = this.get("values");
    if (value === null) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set values(value: Array<BigInt> | null) {
    if (value === null) {
      this.unset("values");
    } else {
      this.set("values", Value.fromBigIntArray(value as Array<BigInt>));
    }
  }
}

export class _ApprovalForAll extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save _ApprovalForAll entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save _ApprovalForAll entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("_ApprovalForAll", id.toString(), this);
  }

  static load(id: string): _ApprovalForAll | null {
    return store.get("_ApprovalForAll", id) as _ApprovalForAll | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get operator(): Bytes {
    let value = this.get("operator");
    return value.toBytes();
  }

  set operator(value: Bytes) {
    this.set("operator", Value.fromBytes(value));
  }

  get approved(): boolean {
    let value = this.get("approved");
    return value.toBoolean();
  }

  set approved(value: boolean) {
    this.set("approved", Value.fromBoolean(value));
  }
}

export class _URI extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save _URI entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save _URI entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("_URI", id.toString(), this);
  }

  static load(id: string): _URI | null {
    return store.get("_URI", id) as _URI | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get uri(): string {
    let value = this.get("uri");
    return value.toString();
  }

  set uri(value: string) {
    this.set("uri", Value.fromString(value));
  }

  get cryptoravesTokenId(): BigInt {
    let value = this.get("cryptoravesTokenId");
    return value.toBigInt();
  }

  set cryptoravesTokenId(value: BigInt) {
    this.set("cryptoravesTokenId", Value.fromBigInt(value));
  }
}
