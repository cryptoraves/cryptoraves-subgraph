// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CryptoDropped extends ethereum.Event {
  get params(): CryptoDropped__Params {
    return new CryptoDropped__Params(this);
  }
}

export class CryptoDropped__Params {
  _event: CryptoDropped;

  constructor(event: CryptoDropped) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get cryptoravesTokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _ercType(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ErrorHandled extends ethereum.Event {
  get params(): ErrorHandled__Params {
    return new ErrorHandled__Params(this);
  }
}

export class ErrorHandled__Params {
  _event: ErrorHandled;

  constructor(event: ErrorHandled) {
    this._event = event;
  }

  get reason(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class NewAdministrator extends ethereum.Event {
  get params(): NewAdministrator__Params {
    return new NewAdministrator__Params(this);
  }
}

export class NewAdministrator__Params {
  _event: NewAdministrator;

  constructor(event: NewAdministrator) {
    this._event = event;
  }

  get _newAdminAddr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _fromContractAddr(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RemovedAdministrator extends ethereum.Event {
  get params(): RemovedAdministrator__Params {
    return new RemovedAdministrator__Params(this);
  }
}

export class RemovedAdministrator__Params {
  _event: RemovedAdministrator;

  constructor(event: RemovedAdministrator) {
    this._event = event;
  }

  get _oldAdminAddr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _fromContractAddr(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get _to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get cryptoravesTokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TokenManagement__managedTokenListByAddressResult {
  value0: BigInt;
  value1: boolean;
  value2: BigInt;
  value3: BigInt;
  value4: string;
  value5: BigInt;
  value6: string;

  constructor(
    value0: BigInt,
    value1: boolean,
    value2: BigInt,
    value3: BigInt,
    value4: string,
    value5: BigInt,
    value6: string
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromString(this.value6));
    return map;
  }
}

export class TokenManagement extends ethereum.SmartContract {
  static bind(address: Address): TokenManagement {
    return new TokenManagement("TokenManagement", address);
  }

  getSymbolOf3rdPartyToken(_tknAddr: Address): string {
    let result = super.call(
      "getSymbolOf3rdPartyToken",
      "getSymbolOf3rdPartyToken(address):(string)",
      [ethereum.Value.fromAddress(_tknAddr)]
    );

    return result[0].toString();
  }

  try_getSymbolOf3rdPartyToken(_tknAddr: Address): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getSymbolOf3rdPartyToken",
      "getSymbolOf3rdPartyToken(address):(string)",
      [ethereum.Value.fromAddress(_tknAddr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getTotalSupplyOf3rdPartyToken(_tknAddr: Address): BigInt {
    let result = super.call(
      "getTotalSupplyOf3rdPartyToken",
      "getTotalSupplyOf3rdPartyToken(address):(uint256)",
      [ethereum.Value.fromAddress(_tknAddr)]
    );

    return result[0].toBigInt();
  }

  try_getTotalSupplyOf3rdPartyToken(
    _tknAddr: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalSupplyOf3rdPartyToken",
      "getTotalSupplyOf3rdPartyToken(address):(uint256)",
      [ethereum.Value.fromAddress(_tknAddr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTransactionManagerAddress(): Address {
    let result = super.call(
      "getTransactionManagerAddress",
      "getTransactionManagerAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getTransactionManagerAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTransactionManagerAddress",
      "getTransactionManagerAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isAdministrator(_addr: Address): boolean {
    let result = super.call(
      "isAdministrator",
      "isAdministrator(address):(bool)",
      [ethereum.Value.fromAddress(_addr)]
    );

    return result[0].toBoolean();
  }

  try_isAdministrator(_addr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAdministrator",
      "isAdministrator(address):(bool)",
      [ethereum.Value.fromAddress(_addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isAvailable(): boolean {
    let result = super.call("isAvailable", "isAvailable():(bool)", []);

    return result[0].toBoolean();
  }

  try_isAvailable(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isAvailable", "isAvailable():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  managedTokenListByAddress(
    param0: Address
  ): TokenManagement__managedTokenListByAddressResult {
    let result = super.call(
      "managedTokenListByAddress",
      "managedTokenListByAddress(address):(uint256,bool,uint256,uint256,string,uint256,string)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new TokenManagement__managedTokenListByAddressResult(
      result[0].toBigInt(),
      result[1].toBoolean(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toString(),
      result[5].toBigInt(),
      result[6].toString()
    );
  }

  try_managedTokenListByAddress(
    param0: Address
  ): ethereum.CallResult<TokenManagement__managedTokenListByAddressResult> {
    let result = super.tryCall(
      "managedTokenListByAddress",
      "managedTokenListByAddress(address):(uint256,bool,uint256,uint256,string,uint256,string)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TokenManagement__managedTokenListByAddressResult(
        value[0].toBigInt(),
        value[1].toBoolean(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toString(),
        value[5].toBigInt(),
        value[6].toString()
      )
    );
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  symbolAndEmojiLookupTable(param0: string): BigInt {
    let result = super.call(
      "symbolAndEmojiLookupTable",
      "symbolAndEmojiLookupTable(string):(uint256)",
      [ethereum.Value.fromString(param0)]
    );

    return result[0].toBigInt();
  }

  try_symbolAndEmojiLookupTable(param0: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "symbolAndEmojiLookupTable",
      "symbolAndEmojiLookupTable(string):(uint256)",
      [ethereum.Value.fromString(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenListByBaseId(param0: BigInt): Address {
    let result = super.call(
      "tokenListByBaseId",
      "tokenListByBaseId(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_tokenListByBaseId(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenListByBaseId",
      "tokenListByBaseId(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCryptoravesTokenAddress(): Address {
    let result = super.call(
      "getCryptoravesTokenAddress",
      "getCryptoravesTokenAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getCryptoravesTokenAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getCryptoravesTokenAddress",
      "getCryptoravesTokenAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxyDepositWithdraw(
    destination: Address,
    value: BigInt,
    data: Bytes
  ): boolean {
    let result = super.call(
      "proxyDepositWithdraw",
      "proxyDepositWithdraw(address,uint256,bytes):(bool)",
      [
        ethereum.Value.fromAddress(destination),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBoolean();
  }

  try_proxyDepositWithdraw(
    destination: Address,
    value: BigInt,
    data: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "proxyDepositWithdraw",
      "proxyDepositWithdraw(address,uint256,bytes):(bool)",
      [
        ethereum.Value.fromAddress(destination),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getAddressBySymbol(_symbol: string): Address {
    let result = super.call(
      "getAddressBySymbol",
      "getAddressBySymbol(string):(address)",
      [ethereum.Value.fromString(_symbol)]
    );

    return result[0].toAddress();
  }

  try_getAddressBySymbol(_symbol: string): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getAddressBySymbol",
      "getAddressBySymbol(string):(address)",
      [ethereum.Value.fromString(_symbol)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTotalSupply(_tokenId: BigInt): BigInt {
    let result = super.call(
      "getTotalSupply",
      "getTotalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );

    return result[0].toBigInt();
  }

  try_getTotalSupply(_tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalSupply",
      "getTotalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSymbol(_tokenId: BigInt): string {
    let result = super.call("getSymbol", "getSymbol(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toString();
  }

  try_getSymbol(_tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("getSymbol", "getSymbol(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getEmoji(_tokenId: BigInt): string {
    let result = super.call("getEmoji", "getEmoji(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toString();
  }

  try_getEmoji(_tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("getEmoji", "getEmoji(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getERCtype(_tokenId: BigInt): BigInt {
    let result = super.call("getERCtype", "getERCtype(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_getERCtype(_tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getERCtype", "getERCtype(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNextBaseId(_tokenId: BigInt): BigInt {
    let result = super.call(
      "getNextBaseId",
      "getNextBaseId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );

    return result[0].toBigInt();
  }

  try_getNextBaseId(_tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNextBaseId",
      "getNextBaseId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  adjustValueByUnits(
    _tokenId: BigInt,
    _value: BigInt,
    _decimalPlace: BigInt
  ): BigInt {
    let result = super.call(
      "adjustValueByUnits",
      "adjustValueByUnits(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_value),
        ethereum.Value.fromUnsignedBigInt(_decimalPlace)
      ]
    );

    return result[0].toBigInt();
  }

  try_adjustValueByUnits(
    _tokenId: BigInt,
    _value: BigInt,
    _decimalPlace: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "adjustValueByUnits",
      "adjustValueByUnits(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_value),
        ethereum.Value.fromUnsignedBigInt(_decimalPlace)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isManagedToken(_token: Address): boolean {
    let result = super.call(
      "isManagedToken",
      "isManagedToken(address):(bool)",
      [ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBoolean();
  }

  try_isManagedToken(_token: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isManagedToken",
      "isManagedToken(address):(bool)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getManagedTokenIdByAddress(_tokenOriginAddr: Address): BigInt {
    let result = super.call(
      "getManagedTokenIdByAddress",
      "getManagedTokenIdByAddress(address):(uint256)",
      [ethereum.Value.fromAddress(_tokenOriginAddr)]
    );

    return result[0].toBigInt();
  }

  try_getManagedTokenIdByAddress(
    _tokenOriginAddr: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getManagedTokenIdByAddress",
      "getManagedTokenIdByAddress(address):(uint256)",
      [ethereum.Value.fromAddress(_tokenOriginAddr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTokenListCount(): BigInt {
    let result = super.call(
      "getTokenListCount",
      "getTokenListCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTokenListCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenListCount",
      "getTokenListCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  testDownstreamAdminConfiguration(): boolean {
    let result = super.call(
      "testDownstreamAdminConfiguration",
      "testDownstreamAdminConfiguration():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_testDownstreamAdminConfiguration(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "testDownstreamAdminConfiguration",
      "testDownstreamAdminConfiguration():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _uri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class SetAdministratorCall extends ethereum.Call {
  get inputs(): SetAdministratorCall__Inputs {
    return new SetAdministratorCall__Inputs(this);
  }

  get outputs(): SetAdministratorCall__Outputs {
    return new SetAdministratorCall__Outputs(this);
  }
}

export class SetAdministratorCall__Inputs {
  _call: SetAdministratorCall;

  constructor(call: SetAdministratorCall) {
    this._call = call;
  }

  get _newAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAdministratorCall__Outputs {
  _call: SetAdministratorCall;

  constructor(call: SetAdministratorCall) {
    this._call = call;
  }
}

export class UnsetAdministratorCall extends ethereum.Call {
  get inputs(): UnsetAdministratorCall__Inputs {
    return new UnsetAdministratorCall__Inputs(this);
  }

  get outputs(): UnsetAdministratorCall__Outputs {
    return new UnsetAdministratorCall__Outputs(this);
  }
}

export class UnsetAdministratorCall__Inputs {
  _call: UnsetAdministratorCall;

  constructor(call: UnsetAdministratorCall) {
    this._call = call;
  }

  get _oldAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UnsetAdministratorCall__Outputs {
  _call: UnsetAdministratorCall;

  constructor(call: UnsetAdministratorCall) {
    this._call = call;
  }
}

export class SetCryptoravesTokenAddressCall extends ethereum.Call {
  get inputs(): SetCryptoravesTokenAddressCall__Inputs {
    return new SetCryptoravesTokenAddressCall__Inputs(this);
  }

  get outputs(): SetCryptoravesTokenAddressCall__Outputs {
    return new SetCryptoravesTokenAddressCall__Outputs(this);
  }
}

export class SetCryptoravesTokenAddressCall__Inputs {
  _call: SetCryptoravesTokenAddressCall;

  constructor(call: SetCryptoravesTokenAddressCall) {
    this._call = call;
  }

  get newAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetCryptoravesTokenAddressCall__Outputs {
  _call: SetCryptoravesTokenAddressCall;

  constructor(call: SetCryptoravesTokenAddressCall) {
    this._call = call;
  }
}

export class DropCryptoCall extends ethereum.Call {
  get inputs(): DropCryptoCall__Inputs {
    return new DropCryptoCall__Inputs(this);
  }

  get outputs(): DropCryptoCall__Outputs {
    return new DropCryptoCall__Outputs(this);
  }
}

export class DropCryptoCall__Inputs {
  _call: DropCryptoCall;

  constructor(call: DropCryptoCall) {
    this._call = call;
  }

  get _twitterHandleFrom(): string {
    return this._call.inputValues[0].value.toString();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _totalSupply(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class DropCryptoCall__Outputs {
  _call: DropCryptoCall;

  constructor(call: DropCryptoCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _amountOrId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _contract(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _ercType(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _managedTransfer(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawERC20Call extends ethereum.Call {
  get inputs(): WithdrawERC20Call__Inputs {
    return new WithdrawERC20Call__Inputs(this);
  }

  get outputs(): WithdrawERC20Call__Outputs {
    return new WithdrawERC20Call__Outputs(this);
  }
}

export class WithdrawERC20Call__Inputs {
  _call: WithdrawERC20Call;

  constructor(call: WithdrawERC20Call) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _contract(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawERC20Call__Outputs {
  _call: WithdrawERC20Call;

  constructor(call: WithdrawERC20Call) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawERC721Call extends ethereum.Call {
  get inputs(): WithdrawERC721Call__Inputs {
    return new WithdrawERC721Call__Inputs(this);
  }

  get outputs(): WithdrawERC721Call__Outputs {
    return new WithdrawERC721Call__Outputs(this);
  }
}

export class WithdrawERC721Call__Inputs {
  _call: WithdrawERC721Call;

  constructor(call: WithdrawERC721Call) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _contract(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawERC721Call__Outputs {
  _call: WithdrawERC721Call;

  constructor(call: WithdrawERC721Call) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ProxyDepositWithdrawCall extends ethereum.Call {
  get inputs(): ProxyDepositWithdrawCall__Inputs {
    return new ProxyDepositWithdrawCall__Inputs(this);
  }

  get outputs(): ProxyDepositWithdrawCall__Outputs {
    return new ProxyDepositWithdrawCall__Outputs(this);
  }
}

export class ProxyDepositWithdrawCall__Inputs {
  _call: ProxyDepositWithdrawCall;

  constructor(call: ProxyDepositWithdrawCall) {
    this._call = call;
  }

  get destination(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ProxyDepositWithdrawCall__Outputs {
  _call: ProxyDepositWithdrawCall;

  constructor(call: ProxyDepositWithdrawCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetSymbolCall extends ethereum.Call {
  get inputs(): SetSymbolCall__Inputs {
    return new SetSymbolCall__Inputs(this);
  }

  get outputs(): SetSymbolCall__Outputs {
    return new SetSymbolCall__Outputs(this);
  }
}

export class SetSymbolCall__Inputs {
  _call: SetSymbolCall;

  constructor(call: SetSymbolCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetSymbolCall__Outputs {
  _call: SetSymbolCall;

  constructor(call: SetSymbolCall) {
    this._call = call;
  }
}

export class SetEmojiCall extends ethereum.Call {
  get inputs(): SetEmojiCall__Inputs {
    return new SetEmojiCall__Inputs(this);
  }

  get outputs(): SetEmojiCall__Outputs {
    return new SetEmojiCall__Outputs(this);
  }
}

export class SetEmojiCall__Inputs {
  _call: SetEmojiCall;

  constructor(call: SetEmojiCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _emoji(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetEmojiCall__Outputs {
  _call: SetEmojiCall;

  constructor(call: SetEmojiCall) {
    this._call = call;
  }
}

export class SubtractFromTotalSupplyCall extends ethereum.Call {
  get inputs(): SubtractFromTotalSupplyCall__Inputs {
    return new SubtractFromTotalSupplyCall__Inputs(this);
  }

  get outputs(): SubtractFromTotalSupplyCall__Outputs {
    return new SubtractFromTotalSupplyCall__Outputs(this);
  }
}

export class SubtractFromTotalSupplyCall__Inputs {
  _call: SubtractFromTotalSupplyCall;

  constructor(call: SubtractFromTotalSupplyCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SubtractFromTotalSupplyCall__Outputs {
  _call: SubtractFromTotalSupplyCall;

  constructor(call: SubtractFromTotalSupplyCall) {
    this._call = call;
  }
}

export class SetIsManagedTokenCall extends ethereum.Call {
  get inputs(): SetIsManagedTokenCall__Inputs {
    return new SetIsManagedTokenCall__Inputs(this);
  }

  get outputs(): SetIsManagedTokenCall__Outputs {
    return new SetIsManagedTokenCall__Outputs(this);
  }
}

export class SetIsManagedTokenCall__Inputs {
  _call: SetIsManagedTokenCall;

  constructor(call: SetIsManagedTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _state(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetIsManagedTokenCall__Outputs {
  _call: SetIsManagedTokenCall;

  constructor(call: SetIsManagedTokenCall) {
    this._call = call;
  }
}

export class ManagedTransferCall extends ethereum.Call {
  get inputs(): ManagedTransferCall__Inputs {
    return new ManagedTransferCall__Inputs(this);
  }

  get outputs(): ManagedTransferCall__Outputs {
    return new ManagedTransferCall__Outputs(this);
  }
}

export class ManagedTransferCall__Inputs {
  _call: ManagedTransferCall;

  constructor(call: ManagedTransferCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _val(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class ManagedTransferCall__Outputs {
  _call: ManagedTransferCall;

  constructor(call: ManagedTransferCall) {
    this._call = call;
  }
}
