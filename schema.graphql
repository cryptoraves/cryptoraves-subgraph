#tokenManagement
type _Deposit @entity {
	id: ID!
	from: Bytes!
	value: BigInt!
	tokenAddress: Bytes!
	cryptoravesTokenId: BigInt!
	ercType: BigInt!
}
type _Withdraw @entity {
	id: ID!
	to: Bytes!
	value: BigInt!
	tokenAddress: Bytes!
	cryptoravesTokenId: BigInt!
	ercType: BigInt!
}
type _Token @entity {
	id: ID!
    cryptoravesTokenId: BigInt!
    isManagedToken: Boolean!
    ercType: BigInt!
    totalSupply: BigInt!
    name: String!
    symbol: String!
    decimals: BigInt!
    emoji: String!
    tokenBrandImageUrl: String
}
type _CryptoDropped @entity {
	id: ID!
	user: Bytes!
	cryptoravesTokenId: BigInt!
}


#transactionManagement
type _Transfer @entity {
	id: ID!
	from: _User!
	to: _User!
	amount: BigInt!
	token: _Token
	tweetId: BigInt!
	fromTo: String!
}



#userManagement
type _User @entity {
	id: ID!
	twitterUserId: BigInt!
	userName: String!
	cryptoravesAddress: Bytes!
	imageUrl: String!
	isManaged: Boolean!
    isUser: Boolean!
    dropped: Boolean!
    tokenId: BigInt!

    #not in .sol struct
    layer1Address: Bytes
}

#cryptoravesToken
type _TransferSingle @entity {
	id: ID!
	operator: Bytes!
	from: Bytes!
	to: Bytes!
	cryptoravesTokenId: BigInt!
	value: BigInt!
}
type _TransferBatch @entity {
	id: ID!
	operator: Bytes!
	from: Bytes!
	to: Bytes!
	cryptoravesTokenIds: [BigInt!]
	values: [BigInt!]
}
type _ApprovalForAll @entity {
	id: ID!
	account: Bytes!
	operator: Bytes!
	approved: Boolean!
}
type _URI @entity {
	id: ID!
	uri: String!
	cryptoravesTokenId: BigInt!
}


#additional schema # Set ID to `${_User.id}-${_Token.id}`
type _UserBalance @entity {
	id: ID!
	user: _User!
	token: _Token!
	balance: BigInt!
}
